# Charging Station Management System
# implement a basic server and charge point 
# interaction using the Open Charge Point Protocol (OCPP) 2.0.1

# This program creates a WebSocket server for handling OCPP 2.0.1 charge points,
# and it uses the "websockets" library to manage the connections. The "ChargePoint"
# class defines behavior for handling Boot Notification messages

import asyncio #Asynchronous I/O library for writing concurrent code using the async/await syntax
import logging #Logging module for printing log messages
import websockets #Library for working with WebSockets
from datetime import datetime #Module for working with dates and times

from ocpp.routing import on #Module for handling OCPP routing

# Module for handling OCPP routing
from ocpp.v201 import ChargePoint as cp
from ocpp.v201 import call_result

# Module containing enums used in OCPP 2.0.1
from ocpp.v201.enums import RegistrationStatusType

logging.basicConfig(level=logging.INFO) #Configures logging to print 
                                        #INFO-level messages

# defines a custom class "ChargePoint" that inherits from "ocpp.v201.ChargePoint"
# Decorates the "on_boot_notification" method with the "@on("BootNotification")"
# decorator, indicating that this method should be called when a Boot Notification
# is received. The method returns a "BootNotificationPayload" inidicating acceptance,
# along with the current time, interval, and status
class ChargePoint(cp):
    @on('BootNotification')
    async def on_boot_notification(self, charging_station, reason, **kwargs):
        return call_result.BootNotificationPayload(
            current_time=datetime.utcnow().isoformat(),
            interval=10,
            status=RegistrationStatusType.accepted
        )

# Async function that is called when a charge point connects. Handles WebSocket
# connection and subprotocols negotiation. Creates an instance of "ChargePoint"
# for each connected charge point and starts listening for messages
async def on_connect(websocket, path):
    """ For every new charge point that connects, create a ChargePoint
    instance and start listening for messages.
    """
    try:
        requested_protocols = websocket.request_headers[
            'Sec-WebSocket-Protocol']
    except KeyError:
        logging.info("Client hasn't requested any Subprotocol. "
                 "Closing Connection")
        return await websocket.close()

    if websocket.subprotocol:
        logging.info("Protocols Matched: %s", websocket.subprotocol)
    else:
        # In the websockets lib if no subprotocols are supported by the
        # client and the server, it proceeds without a subprotocol,
        # so we have to manually close the connection.
        logging.warning('Protocols Mismatched | Expected Subprotocols: %s,'
                        ' but client supports  %s | Closing connection',
                        websocket.available_subprotocols,
                        requested_protocols)
        return await websocket.close()

    charge_point_id = path.strip('/')
    cp = ChargePoint(charge_point_id, websocket)

    await cp.start()

# Async function that sets up the WebSocket server using "websockets.serve"
# Listens on IP address "0.0.0.0" and port 9000, using the OCPP 2.0.1 subprotocol
# Logs a message when the WebSocket server starts. Waits for the server to be closed
async def main():
    server = await websockets.serve(
        on_connect,
        '0.0.0.0',
        9000,
        subprotocols=['ocpp2.0.1']
    )
    logging.info("WebSocket Server Started")
    await server.wait_closed()

# Runs the "main" function using "asyncio.run()" when the script is executed directly
if __name__ == '__main__':
    asyncio.run(main())

"""
Running this program outputs:

"INFO:websockets.server:server listening on 0.0.0.0:9000"
-> This indicates that the WebSocket server is successfully listening on IP address "0.0.0.0"
    (0.0.0.0 means it's accessible from any network interface) and "9000".
-> The server is ready to accept incoming WebSocket connections

"INFO:root:WebSocket Server Started"
-> This is a log message generated by the "logging" module in the program. It's a custom log
    message indicating that the WebSocket server has been started. This message is printed as
    part of the script's execution flow, and it helps you confirm that the server has started successfully

In summary, the WebSocket server is running and waiting for connections on IP address 0.0.0.0
and port 9000. As long as these messages are seen, it means that the program is functioning as
expected, and the server is ready to handle incoming connections from OCPP 2.0.1, allowing the
the operator to proceed with connecting OCPP 2.0.1 charge points to this server for communication

"""